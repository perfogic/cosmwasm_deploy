/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, InstantiateMsg, ExecuteMsg, Binary, Dest, BitcoinConfig, CheckpointConfig, HeaderConfig, WrappedHeader, IbcDest, QueryMsg, MigrateMsg, Uint64, Uint32, HexBinary} from "./CwBitcoin.types";
export interface CwBitcoinReadOnlyInterface {
  contractAddress: string;
  headerHeight: () => Promise<Uint32>;
  depositFees: ({
    index
  }: {
    index?: number;
  }) => Promise<Uint64>;
  withdrawalFees: ({
    address,
    index
  }: {
    address: string;
    index?: number;
  }) => Promise<Uint64>;
  sidechainBlockHash: () => Promise<HexBinary>;
  checkpointByIndex: ({
    index
  }: {
    index: number;
  }) => Promise<Uint64>;
}
export class CwBitcoinQueryClient implements CwBitcoinReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.headerHeight = this.headerHeight.bind(this);
    this.depositFees = this.depositFees.bind(this);
    this.withdrawalFees = this.withdrawalFees.bind(this);
    this.sidechainBlockHash = this.sidechainBlockHash.bind(this);
    this.checkpointByIndex = this.checkpointByIndex.bind(this);
  }

  headerHeight = async (): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      header_height: {}
    });
  };
  depositFees = async ({
    index
  }: {
    index?: number;
  }): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      deposit_fees: {
        index
      }
    });
  };
  withdrawalFees = async ({
    address,
    index
  }: {
    address: string;
    index?: number;
  }): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      withdrawal_fees: {
        address,
        index
      }
    });
  };
  sidechainBlockHash = async (): Promise<HexBinary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      sidechain_block_hash: {}
    });
  };
  checkpointByIndex = async ({
    index
  }: {
    index: number;
  }): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      checkpoint_by_index: {
        index
      }
    });
  };
}
export interface CwBitcoinInterface extends CwBitcoinReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateBitcoinConfig: ({
    config
  }: {
    config: BitcoinConfig;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateCheckpointConfig: ({
    config
  }: {
    config: CheckpointConfig;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateHeaderConfig: ({
    config
  }: {
    config: HeaderConfig;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  relayHeaders: ({
    headers
  }: {
    headers: WrappedHeader[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  relayDeposit: ({
    btcHeight,
    btcProof,
    btcTx,
    btcVout,
    dest,
    sigsetIndex
  }: {
    btcHeight: number;
    btcProof: Binary;
    btcTx: Binary;
    btcVout: number;
    dest: Dest;
    sigsetIndex: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CwBitcoinClient extends CwBitcoinQueryClient implements CwBitcoinInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateBitcoinConfig = this.updateBitcoinConfig.bind(this);
    this.updateCheckpointConfig = this.updateCheckpointConfig.bind(this);
    this.updateHeaderConfig = this.updateHeaderConfig.bind(this);
    this.relayHeaders = this.relayHeaders.bind(this);
    this.relayDeposit = this.relayDeposit.bind(this);
  }

  updateBitcoinConfig = async ({
    config
  }: {
    config: BitcoinConfig;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_bitcoin_config: {
        config
      }
    }, _fee, _memo, _funds);
  };
  updateCheckpointConfig = async ({
    config
  }: {
    config: CheckpointConfig;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_checkpoint_config: {
        config
      }
    }, _fee, _memo, _funds);
  };
  updateHeaderConfig = async ({
    config
  }: {
    config: HeaderConfig;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_header_config: {
        config
      }
    }, _fee, _memo, _funds);
  };
  relayHeaders = async ({
    headers
  }: {
    headers: WrappedHeader[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      relay_headers: {
        headers
      }
    }, _fee, _memo, _funds);
  };
  relayDeposit = async ({
    btcHeight,
    btcProof,
    btcTx,
    btcVout,
    dest,
    sigsetIndex
  }: {
    btcHeight: number;
    btcProof: Binary;
    btcTx: Binary;
    btcVout: number;
    dest: Dest;
    sigsetIndex: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      relay_deposit: {
        btc_height: btcHeight,
        btc_proof: btcProof,
        btc_tx: btcTx,
        btc_vout: btcVout,
        dest,
        sigset_index: sigsetIndex
      }
    }, _fee, _memo, _funds);
  };
}
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, InstantiateMsg, ExecuteMsg, Uint128, TxInfo, Metadata, DenomUnit, QueryMsg, MigrateMsg, Boolean} from "./SimpleBridge.types";
export interface SimpleBridgeReadOnlyInterface {
  contractAddress: string;
  getTx: ({
    hash
  }: {
    hash: string;
  }) => Promise<TxInfo>;
  getTxStatus: ({
    hash
  }: {
    hash: string;
  }) => Promise<Boolean>;
  getRegisterTokenStatus: ({
    subdenom
  }: {
    subdenom: string;
  }) => Promise<Boolean>;
}
export class SimpleBridgeQueryClient implements SimpleBridgeReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getTx = this.getTx.bind(this);
    this.getTxStatus = this.getTxStatus.bind(this);
    this.getRegisterTokenStatus = this.getRegisterTokenStatus.bind(this);
  }

  getTx = async ({
    hash
  }: {
    hash: string;
  }): Promise<TxInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_tx: {
        hash
      }
    });
  };
  getTxStatus = async ({
    hash
  }: {
    hash: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_tx_status: {
        hash
      }
    });
  };
  getRegisterTokenStatus = async ({
    subdenom
  }: {
    subdenom: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_register_token_status: {
        subdenom
      }
    });
  };
}
export interface SimpleBridgeInterface extends SimpleBridgeReadOnlyInterface {
  contractAddress: string;
  sender: string;
  changeOwner: ({
    owner
  }: {
    owner: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addTx: ({
    hash,
    value
  }: {
    hash: string;
    value: TxInfo;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateTx: ({
    destHash,
    hash
  }: {
    destHash: string;
    hash: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerDenom: ({
    metadata,
    subdenom
  }: {
    metadata?: Metadata;
    subdenom: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SimpleBridgeClient extends SimpleBridgeQueryClient implements SimpleBridgeInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.changeOwner = this.changeOwner.bind(this);
    this.addTx = this.addTx.bind(this);
    this.updateTx = this.updateTx.bind(this);
    this.registerDenom = this.registerDenom.bind(this);
  }

  changeOwner = async ({
    owner
  }: {
    owner: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_owner: {
        owner
      }
    }, _fee, _memo, _funds);
  };
  addTx = async ({
    hash,
    value
  }: {
    hash: string;
    value: TxInfo;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_tx: {
        hash,
        value
      }
    }, _fee, _memo, _funds);
  };
  updateTx = async ({
    destHash,
    hash
  }: {
    destHash: string;
    hash: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_tx: {
        dest_hash: destHash,
        hash
      }
    }, _fee, _memo, _funds);
  };
  registerDenom = async ({
    metadata,
    subdenom
  }: {
    metadata?: Metadata;
    subdenom: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_denom: {
        metadata,
        subdenom
      }
    }, _fee, _memo, _funds);
  };
}
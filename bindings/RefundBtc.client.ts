/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {InstantiateMsg, ExecuteMsg, Addr, Uint128, AssetInfo, Asset, QueryMsg, MigrateMsg, Config, RewardTokensResponse} from "./RefundBtc.types";
export interface RefundBtcReadOnlyInterface {
  contractAddress: string;
  rewardTokens: ({
    addr
  }: {
    addr: Addr;
  }) => Promise<RewardTokensResponse>;
  config: () => Promise<Config>;
}
export class RefundBtcQueryClient implements RefundBtcReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.rewardTokens = this.rewardTokens.bind(this);
    this.config = this.config.bind(this);
  }

  rewardTokens = async ({
    addr
  }: {
    addr: Addr;
  }): Promise<RewardTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward_tokens: {
        addr
      }
    });
  };
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface RefundBtcInterface extends RefundBtcReadOnlyInterface {
  contractAddress: string;
  sender: string;
  claim: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addRewarder: ({
    rewarder,
    rewards
  }: {
    rewarder: Addr;
    rewards: Asset[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RefundBtcClient extends RefundBtcQueryClient implements RefundBtcInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.claim = this.claim.bind(this);
    this.addRewarder = this.addRewarder.bind(this);
  }

  claim = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {}
    }, _fee, _memo, _funds);
  };
  addRewarder = async ({
    rewarder,
    rewards
  }: {
    rewarder: Addr;
    rewards: Asset[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_rewarder: {
        rewarder,
        rewards
      }
    }, _fee, _memo, _funds);
  };
}